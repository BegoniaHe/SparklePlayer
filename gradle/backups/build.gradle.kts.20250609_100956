plugins {
    java
    application
    checkstyle
    pmd
    id("com.github.spotbugs") version "5.0.14"
}

group = "com.sparkle"
version = "1.0.2"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.compileJava {
    options.compilerArgs.addAll(listOf(
        "-Xlint:all",           // 启用所有警告
        "-Xlint:-options",      // 禁用选项警告（避免噪音）
        "-Xlint:-path",         // 禁用路径警告（避免噪音）
        // "-Werror",           // 暂时注释，允许构建继续进行静态分析
        "-Xmaxwarns", "1000",   // 最大警告数
        "-Xmaxerrs", "100"      // 最大错误数
    ))
    options.encoding = "UTF-8"
    options.isDeprecation = true
    options.isWarnings = true
}

application {
    mainClass.set("com.sparkle.enterProgram.EnterProgram")
}

repositories {
    mavenCentral()
    flatDir {
        dirs("sparkleplayer/libs", "sparkleplayer/libs/musique")
    }
}

dependencies {
    // Apache Commons libraries
    implementation(("commons-beanutils:commons-beanutils:1.11.0"))
    implementation(("commons-codec:commons-codec:1.18.0"))
    implementation(("commons-collections:commons-collections:3.2.2"))
    implementation(("commons-lang:commons-lang:2.6"))
    implementation(("commons-logging:commons-logging:1.3.5"))
    
    // JSON processing
    implementation(("net.sf.ezmorph:ezmorph:1.0.6"))
    implementation(("net.sf.json-lib:json-lib:2.4:jdk15"))
    
    // Logging
    implementation(("log4j:log4j:1.2.17"))
    
    // Derby database
    implementation(("org.apache.derby:derby:10.17.1.0"))
    
    // Static analysis tools
    spotbugsPlugins(("com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0"))
    
    // Local JAR dependencies from sparkleplayer/libs
    implementation(group = "", name = "JPlayer-lib", version = "", ext = "jar")
    implementation(group = "", name = "TweenEngine-lib", version = "", ext = "jar")
    
    // Audio codec libraries from sparkleplayer/libs/musique
    implementation(group = "", name = "alacdecoder-1.0", version = "", ext = "jar")
    implementation(group = "", name = "cuelib-1.2.1", version = "", ext = "jar")
    implementation(group = "", name = "discogs-0.1", version = "", ext = "jar")
    implementation(group = "", name = "jaad-0.7.3", version = "", ext = "jar")
    implementation(group = "", name = "jaudiotagger-2.0.4", version = "", ext = "jar")
    implementation(group = "", name = "javaFlacEncoder-0.1", version = "", ext = "jar")
    implementation(group = "", name = "javalayer-1.0.1", version = "", ext = "jar")
    implementation(group = "", name = "jflac-1.3", version = "", ext = "jar")
    implementation(group = "", name = "jmac-1.74", version = "", ext = "jar")
    implementation(group = "", name = "jorbis-0.0.17", version = "", ext = "jar")
    implementation(group = "", name = "tta-1.0", version = "", ext = "jar")
    implementation(group = "", name = "vorbis-java-1.0.0-beta", version = "", ext = "jar")
    implementation(group = "", name = "wavpack-1.1", version = "", ext = "jar")
}

sourceSets {
    main {
        java {
            setSrcDirs(listOf("src"))
        }
        resources {
            setSrcDirs(listOf("src"))
            exclude("**/*.java")
        }
    }
}

tasks.jar {
    manifest {
        attributes(
            "Main-Class" to "com.sparkle.enterProgram.EnterProgram"
        )
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

val copyResources = tasks.register<Copy>("copyResources") {
    from("sparkle/resources")
    into("$buildDir/resources/main/sparkle")
}

tasks.processResources {
    dependsOn(copyResources)
}

val fatJar = tasks.register<Jar>("fatJar") {
    archiveClassifier.set("fat")
    manifest {
        attributes(
            "Main-Class" to "com.sparkle.enterProgram.EnterProgram"
        )
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    with(tasks.jar.get())
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.run.configure {
    workingDir = projectDir
    systemProperty("user.dir", projectDir.absolutePath)
}

val sourcesJar = tasks.register<Jar>("sourcesJar") {
    archiveClassifier.set("sources")
    from(sourceSets.main.get().allSource)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
    add("archives", sourcesJar)
    add("archives", fatJar)
}

// ================================
// 静态代码分析配置
// ================================

// Checkstyle 配置
checkstyle {
    toolVersion = "10.12.1"
    configFile = file("config/checkstyle/checkstyle.xml")
    isIgnoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

tasks.withType<Checkstyle> {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

// PMD 配置
pmd {
    toolVersion = "6.55.0"
    isIgnoreFailures = false
    ruleSets = listOf()
    ruleSetFiles = files("config/pmd/pmd.xml")
    isConsoleOutput = true
}

tasks.withType<Pmd> {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

// SpotBugs 配置
spotbugs {
    ignoreFailures.set(false)
    showStackTraces.set(true)
    showProgress.set(true)
    effort.set(com.github.spotbugs.snom.Effort.MAX)
    reportLevel.set(com.github.spotbugs.snom.Confidence.LOW)
    excludeFilter.set(file("config/spotbugs/exclude.xml"))
}

tasks.withType<com.github.spotbugs.snom.SpotBugsTask> {
    reports.create("xml") {
        required.set(true)
        outputLocation.set(file("$buildDir/reports/spotbugs/spotbugs.xml"))
    }
    reports.create("html") {
        required.set(true)
        outputLocation.set(file("$buildDir/reports/spotbugs/spotbugs.html"))
        setStylesheet("fancy-hist.xsl")
    }
}

// 检查任务依赖
tasks.check {
    dependsOn(tasks.checkstyleMain, tasks.pmdMain, tasks.spotbugsMain)
}

// 自定义任务：运行所有静态分析
val staticAnalysis = tasks.register("staticAnalysis") {
    description = "运行所有静态代码分析工具"
    group = "verification"
    dependsOn(tasks.checkstyleMain, tasks.pmdMain, tasks.spotbugsMain)
}

// 严格编译检查任务（将警告视为错误）
val strictCompile = tasks.register<JavaCompile>("strictCompile") {
    description = "使用最严格的设置编译Java代码"
    group = "verification"
    source = sourceSets.main.get().java
    classpath = sourceSets.main.get().compileClasspath
    destinationDirectory.set(file("$buildDir/classes/strict"))
    
    options.compilerArgs.addAll(listOf(
        "-Xlint:all",
        "-Xlint:-options",
        "-Xlint:-path",
        "-Werror",
        "-Xmaxwarns", "1000",
        "-Xmaxerrs", "100"
    ))
    options.encoding = "UTF-8"
    options.isDeprecation = true
    options.isWarnings = true
}

// 代码质量检查任务（包含编译检查但不阻止构建）
val codeQualityCheck = tasks.register("codeQualityCheck") {
    description = "运行完整的代码质量检查"
    group = "verification"
    
    doLast {
        println("=".repeat(80))
        println("代码质量检查完成！")
        println("请查看以下位置的报告：")
        println("- Checkstyle: build/reports/checkstyle/main.html")
        println("- PMD: build/reports/pmd/main.html") 
        println("- SpotBugs: build/reports/spotbugs/spotbugs.html")
        println("=".repeat(80))
    }
}
